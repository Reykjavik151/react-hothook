{"version":3,"file":"index.modern.js","sources":["../src/hooks/useAsync.ts","../src/hooks/useCached.ts","../src/hooks/useCountdown.ts","../src/hooks/useDebouncedValue.ts","../src/hooks/useDeepCompareEffect.ts","../src/hooks/useFetch.ts","../src/hooks/useMount.ts","../src/hooks/usePrevious.ts","../src/hooks/useSpecificKeyExtractor.ts","../src/hooks/useStateWithCached.ts","../src/hooks/useStateWithPrevious.ts","../src/hooks/useUpdateEffect.ts","../src/hooks/useStateWithValidation.ts","../src/hooks/useToggle.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\n/**\n * Async wrapper for async/await functions with Promise return\n * @param asyncFn should return promise\n * @returns data - expected value of \"asyncFn\", error - something went wrong (unexpected), loading - is asyncFn running\n */\nexport const useAsync = <TExpectedData>(asyncFn: () => Promise<TExpectedData>) => {\n  const [data, setData] = useState<TExpectedData | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setData(null);\n    setError(null);\n    setIsLoading(false);\n\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const result = await asyncFn();\n        setData(result);\n      } catch (err) {\n        setError(err as Error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [asyncFn]);\n\n  return { data, error, loading: isLoading };\n};\n","import { isEmpty, isNull, isUndefined } from 'lodash';\nimport { useEffect, useRef } from 'react';\n\n/**\n * Saves only not empty, not undefined and not null values\n * @param value any value to save\n * @returns the previous saved non-empty value\n */\nexport const useCached = <T>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    // Save only value, not empty / undefined / null\n    // Check all of these cases, because we may have `false` value to work with\n    if (!(isEmpty(value) || isUndefined(value) || isNull(value))) {\n      ref.current = value;\n    }\n  }, [value]);\n  return ref.current;\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\ntype UseCountdownOptions = {\n  initialRemainingTimeMs: number;\n  onEnd?: () => void;\n  onTick?: (timeLeft: number) => void;\n  countdownStepMs?: number;\n};\n\n/**\n * Hook to manage a countdown timer\n *\n * @param options initialRemainingTimeMs: number; onEnd?: () => void; onTick?: (timeLeft: number) => void; countdownStepMs?: number;\n * @returns set of functions and values to manage a countdown, including pause, resume, reset, and setting a new time\n *\n * @example\n * const {\n *   timeLeft,\n *   isPaused,\n *   resetCountdown,\n *   pauseCountdown,\n *   resumeCountdown,\n *   setNewRemainingTime,\n * } = useCountdown({\n *   initialRemainingTimeMs: 60000,\n *   countdownStepMs: 400,\n *   onTick: (currentTimeLeft) => { console.log('Countdown tick:', currentTimeLeft); },\n *   onEnd: () => { console.log('Countdown ended!'); },\n * });\n */\nexport const useCountdown = ({\n  initialRemainingTimeMs,\n  onEnd,\n  onTick,\n  countdownStepMs = 1000\n}: UseCountdownOptions) => {\n  const [timeLeft, setTimeLeft] = useState<number>(initialRemainingTimeMs);\n  const [isPaused, setIsPaused] = useState<boolean>(false);\n\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const startTimer = useCallback(() => {\n    if (!timerRef.current) {\n      timerRef.current = setInterval(() => {\n        setTimeLeft((prev) => {\n          if (prev <= countdownStepMs) {\n            clearInterval(timerRef.current!);\n            timerRef.current = null;\n            onEnd?.();\n            return 0;\n          }\n\n          const newTime = prev - countdownStepMs;\n          onTick?.(newTime);\n          return newTime;\n        });\n      }, countdownStepMs);\n    }\n  }, [countdownStepMs, onEnd, onTick]);\n  const stopTimer = useCallback(() => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    // Launch countdown if there's time left and no interval is running\n    if (timeLeft > 0 && !isPaused && !timerRef.current) {\n      startTimer();\n    }\n\n    // Clean up on unmount\n    return () => {\n      stopTimer();\n    };\n  }, [timeLeft, isPaused, startTimer, stopTimer]);\n\n  const pauseCountdown = useCallback(() => {\n    setIsPaused(true);\n    stopTimer();\n  }, [stopTimer]);\n  const resumeCountdown = useCallback(() => {\n    setIsPaused(false);\n    startTimer();\n  }, [startTimer]);\n\n  const setNewRemainingTime = useCallback((newTimeMs: number) => {\n    setTimeLeft(newTimeMs);\n  }, []);\n  const resetCountdown = useCallback(() => {\n    setTimeLeft(0);\n    pauseCountdown();\n  }, [pauseCountdown]);\n\n  return {\n    isPaused,\n    timeLeft,\n    setNewRemainingTime,\n    resetCountdown,\n    pauseCountdown,\n    resumeCountdown\n  };\n};\n","import { useEffect, useState } from 'react';\n\n/**\n * Get value after a delay. If value changes within the delay period, the timeout gets cleared and restarted.\n * @param value current value to debounce\n * @param delay time to wait before updating the debounced value\n * @returns debounced value\n */\nexport const useDebouncedValue = <TValue>(value: TValue, delay: number) => {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n\n  return debouncedValue;\n};\n","import { isEqual } from 'lodash';\n// eslint-disable-next-line no-unused-vars\nimport { DependencyList, useEffect, useRef } from 'react';\n\ntype EffectCallback = () => void;\n\n/**\n * Allows a component to run an effect only when the dependencies have changed using a deep comparison instead of a shallow comparison\n * @param callback function that must be called when the deps change\n * @param dependencies deep comparison dependencies that will be used to trigger the callback\n */\nexport const useDeepCompareEffect = (callback: EffectCallback, dependencies: DependencyList): void => {\n  const currentDependenciesRef = useRef<DependencyList | null>(null);\n\n  if (!isEqual(currentDependenciesRef.current, dependencies)) {\n    currentDependenciesRef.current = dependencies;\n  }\n\n  useEffect(callback, [currentDependenciesRef.current]);\n};\n","import { useAsync } from './useAsync';\n\nconst DEFAULT_HEADERS = {\n  'Content-Type': 'application/json'\n};\n\n/**\n * Hook to fetch data from an API\n * @param url fetch url\n * @param options fetch options\n * @returns Promise with the response body\n */\nexport const useFetch = (url: string, options: RequestInit = {}) =>\n  useAsync(() =>\n    fetch(url, {\n      ...options,\n      headers: { ...DEFAULT_HEADERS, ...(options.headers ?? {}) }\n    }).then((res) => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return res.json().then((json) => {\n        throw new Error(json);\n      });\n    })\n  );\n","import { useEffect } from 'react';\n\n/**\n * Empty dependency array useEffect\n * @param func the main function to run on mountion of the component\n * @returns useEffect with empty dependency array\n */\nexport const useMount = (func: () => void) => useEffect(func, []);\n","import { useEffect, useRef } from 'react';\n\n/**\n * Saves the previous state of the value\n * @param value the current value from the useState (usually) to save its prev value\n * @param valuesToIgnore an array of values to ignore when saving the previous value\n * @returns the previous saved value\n */\nexport const usePrevious = <T>(value: T, valuesToIgnore: Array<T> = []): T | undefined => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    if (valuesToIgnore.includes(value)) return;\n    ref.current = value;\n  }, [value, valuesToIgnore]);\n  return ref.current;\n};\n","import { useCallback } from 'react';\n\n/**\n * Creates a key extractor function for React mapping that uses a specific field of the item as a key\n * @param prefix prefix for the key\n * @param field field of the item to use as a key\n * @returns key extractor function for React mapping\n */\nexport const useSpecificKeyExtractor = <TItem>(prefix: string, field: keyof TItem) =>\n  useCallback((item: TItem, index: number) => `${prefix}-${item[field]}-${index}`, [prefix, field]);\n","// eslint-disable-next-line no-unused-vars\nimport React, { SetStateAction, useState } from 'react';\n\nimport { useCached } from './useCached';\n\n/**\n * Extends React.useState with a cached non-empty state as a third output value of array\n * @param initialValue initial value as the third value of the state and prevState\n * @returns [state, setState, cachedState] - state is the current state (including undefined and null), setState is the setter for the state, cachedState is the latest non-empty state\n */\nexport const useStateWithCached = <T>(initialValue: T): [T, React.Dispatch<SetStateAction<T>>, T | undefined] => {\n  const [state, setState] = useState<T>(initialValue);\n  const cachedState = useCached(state);\n\n  return [state, setState, cachedState];\n};\n","// eslint-disable-next-line no-unused-vars\nimport React, { SetStateAction, useState } from 'react';\n\nimport { usePrevious } from './usePrevious';\n\n/**\n * Extends React.useState with a previous state as a first output value of array\n * @param initialValue initial value as the third value of the state and prevState\n * @returns [state, setState, prevState] - state is the current state, setState is the setter for the state, prevState is the previous state,\n */\nexport const useStateWithPrevious = <T>(initialValue: T): [T, React.Dispatch<SetStateAction<T>>, T | undefined] => {\n  const [state, setState] = useState<T>(initialValue);\n  const prevState = usePrevious(state);\n\n  return [state, setState, prevState];\n};\n","import { useEffect, useRef } from 'react';\n\n/**\n * Extended useEffect - skip first function call on mount and leave only update calls\n * @param callback function that must be called when the deps change and skip first time as main purpose\n * @param deps dependencies that will be used to trigger the callback\n */\nexport const useUpdateEffect = (callback: () => void, deps: React.DependencyList) => {\n  const firstRenderRef = useRef(true);\n\n  useEffect(() => {\n    if (firstRenderRef.current) {\n      firstRenderRef.current = false;\n      return;\n    }\n\n    // eslint-disable-next-line consistent-return\n    return callback();\n  }, deps);\n};\n","// eslint-disable-next-line no-unused-vars\nimport React, { SetStateAction, useState } from 'react';\n\nimport { useUpdateEffect } from './useUpdateEffect';\n\n/**\n * Extends React.useState with a validator function (second parameter) that validates the state and returns a boolean as a third value of the output array.\n * @param initialValue initial value of the state\n * @param validator function-validator that validates the state after each state update\n * @returns [state, setState, isValid] - state is the current state, setState is the setter for the state, isValid is a boolean that indicates if the state passes the validation\n */\nexport const useStateWithValidation = <T>(\n  initialValue: T,\n  validator: (value: T) => boolean\n): [T, React.Dispatch<SetStateAction<T>>, boolean] => {\n  const [state, setState] = useState<T>(initialValue);\n  const [isValid, setIsValid] = useState(validator(state));\n\n  useUpdateEffect(() => {\n    setIsValid(validator(state));\n  }, [state, validator]);\n\n  return [state, setState, isValid];\n};\n","import { useCallback, useState } from 'react';\n\n/**\n * Extended useState for boolean value with exported toggle function\n * @param defaultValue boolean value to set as default\n * @returns [isValue, toggleValue] - isValue is the current boolean value, toggleValue is the toggle setter for the boolean value without any params\n */\nexport const useToggle = (defaultValue: boolean): [boolean, () => void] => {\n  const [isValue, setIsValue] = useState(defaultValue);\n\n  const toggleValue = useCallback(() => setIsValue((prevState) => !prevState), []);\n\n  return [isValue, toggleValue];\n};\n"],"names":["useAsync","asyncFn","data","setData","useState","error","setError","isLoading","setIsLoading","useEffect","fetchData","result","err","loading","useCached","value","ref","useRef","isEmpty","isUndefined","isNull","current","useCountdown","initialRemainingTimeMs","onEnd","onTick","countdownStepMs","timeLeft","setTimeLeft","isPaused","setIsPaused","timerRef","startTimer","useCallback","setInterval","prev","clearInterval","newTime","stopTimer","pauseCountdown","resumeCountdown","setNewRemainingTime","newTimeMs","resetCountdown","useDebouncedValue","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDeepCompareEffect","callback","dependencies","currentDependenciesRef","isEqual","DEFAULT_HEADERS","useFetch","url","options","fetch","headers","then","res","ok","json","Error","useMount","func","usePrevious","valuesToIgnore","includes","useSpecificKeyExtractor","prefix","field","item","index","useStateWithCached","initialValue","state","setState","cachedState","useStateWithPrevious","prevState","useUpdateEffect","deps","firstRenderRef","useStateWithValidation","validator","isValid","setIsValid","useToggle","defaultValue","isValue","setIsValue","toggleValue"],"mappings":"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"}